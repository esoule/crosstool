http://sources.redhat.com/cgi-bin/cvsweb.cgi/libc/linuxthreads/sysdeps/pthread/pthread.h.diff?r1=1.31&r2=1.32&cvsroot=glibc

Fixes 
../linuxthreads/sysdeps/pthread/pthread.h:141: error: parse error before "__thread"
../linuxthreads/sysdeps/pthread/pthread.h:141: error: `pthread_create' declared as function returning a function
../linuxthreads/sysdeps/pthread/pthread.h:141: warning: function declaration isn't a prototype
../linuxthreads/sysdeps/pthread/pthread.h:141: error: parse error before "void"
../linuxthreads/sysdeps/pthread/pthread.h:462: error: storage class specified for parameter `type name'

when compiling with gcc3.x

Rediffed against glibc-2.1.3

--- glibc-2.1.3/linuxthreads/sysdeps/pthread/pthread.h.orig	2000-01-20 17:40:19.000000000 -0800
+++ glibc-2.1.3/linuxthreads/sysdeps/pthread/pthread.h	2004-03-04 15:56:43.000000000 -0800
@@ -138,7 +138,7 @@
 /* Create a thread with given attributes ATTR (or default attributes
    if ATTR is NULL), and call function START_ROUTINE with given
    arguments ARG.  */
-extern int pthread_create __P ((pthread_t *__thread,
+extern int pthread_create __P ((pthread_t *__threadp,
 				__const pthread_attr_t *__attr,
 				void *(*__start_routine) (void *),
 				void *__arg));
@@ -459,7 +459,7 @@
 extern int pthread_setcanceltype __P ((int __type, int *__oldtype));
 
 /* Cancel THREAD immediately or at the next possibility.  */
-extern int pthread_cancel __P ((pthread_t __thread));
+extern int pthread_cancel __P ((pthread_t __cancelthread));
 
 /* Test for pending cancellation for the current thread and terminate
    the thread as per pthread_exit(PTHREAD_CANCELED) if it has been
