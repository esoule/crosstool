#!/bin/sh
# Generate report showing matrix of build results for a run of regtest-run.sh
# Copyright (C) 2005, Dan Kegel, Google
# License: GPL

set -x
LOGDIR=jobdir

LANG=C
export LANG
for logfile in $LOGDIR/*.log; do
	base=`echo $logfile | sed 's/\.log$//'`

	# Extract crosstool parameters from log (shouldn't we do this differently?)
	head -100 $base.log | egrep '^\+\+ (TARGET|BINUTILS_DIR|GCC_DIR|GLIBC_DIR|LINUX_DIR)=[-a-z0-9_.]+' | sed 's/^...//' > $base.dat.txt
	# Extract last few lines of log for posterity
	tail -300 $base.log > $base.log.txt

	# Extract whether build secceeded
	if grep "Linux kernel build done" $base.log.txt > /dev/null; then
	   tresult="PASS"
	   kresult="PASS"
	elif grep "internal compiler error" $base.log > /dev/null; then
	   tresult="ICE"
	   kresult="FAIL"
	elif grep "testhello: C compiler can in fact build a trivial program" $base.log > /dev/null; then
	   tresult="PASS"
	   kresult="FAIL"
	else
	   tresult="FAIL"
	   kresult="FAIL"
	fi

	# Append success/failure data to param file
	printf "toolchain=$tresult\nkernel=$kresult\n" >> $base.dat.txt
done

# Figure out which tool combinations were used
for file in $LOGDIR/*.dat.txt; do
	egrep 'BINUTILS_DIR|GCC_DIR|GLIBC_DIR|LINUX_DIR' < $file | sort | tr '\012' :
	echo ''
done | sort -u > all-tools.tmp
ALL_CPUS=`cat $LOGDIR/*.dat.txt | awk -F= /TARGET/ | sed 's/TARGET=//;s/-unknown//;s/-linux-gnu//' | sort -u`

OUT=$LOGDIR/index.html
cat  > $OUT <<_EOF_
<html>
<head>
<title>Crosstool build results</title>
</head>
<body>
<h2>Crosstool build results</h2>
The following matrix shows whether the given combinations of
gcc, glibc, binutils, and linux kernel headers, lightly patched,
can build a cross-toolchain and compile a kernel for the given CPUs. 
(It doesn't say anything about whether the resulting toolchain works!)
It was generated by running the script regtest-report.sh that comes with 
<a href="http://kegel.com/crosstool">crosstool</a>.
Click on a matrix entry for the last few lines of that build log file.
_EOF_

echo "<table><tr><th>" >> $OUT

for tools in `cat all-tools.tmp`; do
	echo $tools | tr : '\012' > tools.tmp
	BINUTILS_DIR=`awk -F= '/BINUTILS_DIR/ {print $2}' tools.tmp`
	GCC_DIR=`awk -F= '/GCC_DIR/ {print $2}' tools.tmp`
	GLIBC_DIR=`awk -F= '/GLIBC_DIR/ {print $2}' tools.tmp`
	LINUX_DIR=`awk -F= '/LINUX_DIR/ {print $2}' tools.tmp`
	echo "<th>$GCC_DIR<br>$GLIBC_DIR<br>$BINUTILS_DIR<br>$LINUX_DIR<br></th>" >> $OUT
done
echo '</tr>' >> $OUT

for cpu in $ALL_CPUS; do
   # kludge until I use uniform names
   case $cpu in
   arm-9tdmi) cpu=arm9tdmi;;
   armv5b-softfloat-linux) cpu=armv5b-softfloat;;
   powerpc64) cpu=powerpc-970;;
   esac
   echo '<tr><th>'$cpu'</th>'
   for tools in `cat all-tools.tmp`; do
	echo $tools | tr : '\012' > tools.tmp
	BINUTILS_DIR=`awk -F= '/BINUTILS_DIR/ {print $2}' tools.tmp`
	GCC_DIR=`awk -F= '/GCC_DIR/ {print $2}' tools.tmp`
	GLIBC_DIR=`awk -F= '/GLIBC_DIR/ {print $2}' tools.tmp`
	LINUX_DIR=`awk -F= '/LINUX_DIR/ {print $2}' tools.tmp`
	toolcombo=$GCC_DIR-$GLIBC_DIR
      echo '<td ' 
      if test -f $LOGDIR/$cpu-$toolcombo.sh.dat.txt; then
        status=`cat $LOGDIR/$cpu-$toolcombo.sh.dat.txt`
        case "$status" in
        *kernel=PASS*)    echo 'style="background-color: green"><a href="'$cpu-$toolcombo.sh.log.txt'">ok</a>'           ;;
        *toolchain=PASS*) echo 'style="background-color: yellow"><a href="'$cpu-$toolcombo.sh.log.txt'">kernel fail</a>' ;;
        *toolchain=ICE*)  echo 'style="background-color: orange"><a href="'$cpu-$toolcombo.sh.log.txt'">ICE</a>'         ;;
        *toolchain=FAIL*) echo 'style="background-color: red"><a href="'$cpu-$toolcombo.sh.log.txt'">FAIL</a>'           ;;
	*) echo 'bug in regtest-report.sh' ;;
        esac
      fi
      echo '</td>' 
   done
   echo '</tr>' 
done >> $OUT
echo '</table>' >> $OUT
echo '</body></html>' >> $OUT

