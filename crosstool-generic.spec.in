# Parameters set when .in file is expanded by crosstool's buildrpm.sh
%define version __MUNGEDVERSION__
%define gccvers __GCCVERSION__
%define glibcvers __GLIBCVERSION__
%define binutilsvers __BINUTILSVERSION__
%define kernelversion __KERNELVERSION__
%define toolcombo gcc_%{gccvers}_glibc_%{glibcvers}

# FIXME: should be defined by --define 'gnutarget ...' option to rpmbuild,
# but hardcoded at expansion time for now
%define gnutarget __TARGET__

# Workaround for http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=90691
%undefine __check_files

Summary: GNU Compiler + GNU C Library cross-toolchain
Name: crosstool-%{toolcombo}
Version: %{version}
Release: 1
License: GPL
Group: Development/Languages
%define base_url http://www.kegel.com/crosstool/
URL: %{base_url}
Source0: %{base_url}/crosstool-__VERSION__.tar.gz
Source1: gcc-%{gccvers}.tar.gz
Source2: glibc-%{glibcvers}.tar.bz2
Source3: glibc-linuxthreads-%{glibcvers}.tar.bz2
Source4: binutils-%{binutilsvers}.tar.bz2
Source5: linux-%{kernelversion}.tar.bz2
BuildRequires: /bin/pwd, /bin/sh, autoconf, binutils >= 2.9.4, bison
BuildRequires: bzip2, diffutils, fileutils, findutils, flex
BuildRequires: glibc-devel >= 2.1, gzip, m4 >= 1.1, make >= 3.77, patch >= 2.5
BuildRequires: rpm >= 3.0, sed, tar, textutils
AutoReqProv: no

%description
It's a toolchain!  It's a floor wax!

%changelog
* Fri Jul 30 2004 Dan Kegel <dank@kegel.com>
- created spec file.  See crosstool tarball's ChangeLog for other details.

%prep
#%setup -n crosstool-__VERSION__

%build
#TBD

%install
# install already done during build


# rpm tacks this on to the end of the name of the subpackage
# This is how we make the .srpm have a generic name, but the
# binary rpms have target-specific names.  Clever, eh?
# Note: main package has no %files section; it's just for sources.
%package %{gnutarget}
Summary: GNU Compiler + GNU C Library cross-toolchain
Group: Development/Languages
AutoReqProv: no

%description %{gnutarget}
It's a toolchain!  It's a floor wax!

%post %{gnutarget}
# Tell crosstool-distcc about the newly installed executables
PREFIX_PARENT=`dirname __PREFIX__`
PREFIX_GRANDPARENT=`dirname $PREFIX_PARENT`
if test -x $PREFIX_GRANDPARENT/common/bin/mkdistcclinks.sh; then cd $PREFIX_GRANDPARENT; sh common/bin/mkdistcclinks.sh > /dev/null; fi

%preun %{gnutarget}
# Clean up non-RPM-owned files in our branch of the directory tree
rm -rf __PREFIX__/distributed/
# Uninstall any shared libraries that we installed (their uninstall scripts are named $lib.dir/uninstall.sh)
files=`test -d __PREFIX__/__TARGET__/lib && find __PREFIX__/__TARGET__/lib -type f -name uninstall.sh | grep '\.dir' `
files64=`test -d __PREFIX__/__TARGET__/lib64 && find __PREFIX__/__TARGET__/lib64 -type f -name uninstall.sh | grep '\.dir' `
for file in $files $files64; do
   sh $file || true
done

%postun %{gnutarget}
# Rebuild the apps file sans freshly removed compilers
PREFIX_PARENT=`dirname __PREFIX__`
PREFIX_GRANDPARENT=`dirname $PREFIX_PARENT`
if test -x $PREFIX_GRANDPARENT/common/bin/mkdistcclinks.sh; then cd $PREFIX_GRANDPARENT; sh common/bin/mkdistcclinks.sh > /dev/null; fi

%files %{gnutarget}
%defattr(-,root,root)
__PREFIX__/

%package %{gnutarget}-libgcc
Summary: GCC version 3.4 shared support library
Group: System Environment/Libraries
License: GPL
Requires: %{name}-%{gnutarget}

%description %{gnutarget}-libgcc
This subpackage activates the GCC shared support library lib/libgcc_s.so (or
lib64/libgcc_s.so) installed by the main package.  It only needs to
be installed on machines that will be running programs built by this
toolchain, and only if the system doesn't already have a compatible
library.

%pre %{gnutarget}-libgcc
for topdir in __PREFIX__/__TARGET__/lib __PREFIX__/__TARGET__/lib64; do
  if test -d $topdir; then
     dirs=`find $topdir -name 'libgcc*.dir' || true`
     for dir in $dirs $dirs64; do
       if test -f $dir/install.sh; then sh $dir/install.sh || true; fi
     done
  fi
done

%preun %{gnutarget}-libgcc
for topdir in __PREFIX__/__TARGET__/lib __PREFIX__/__TARGET__/lib64; do
  if test -d $topdir; then
     dirs=`find $topdir -name 'libgcc*.dir' || true`
     for dir in $dirs $dirs64; do
       if test -f $dir/uninstall.sh; then sh $dir/uninstall.sh || true; fi
     done
  fi
done

%files %{gnutarget}-libgcc

%package %{gnutarget}-libstdc++
Summary: GNU Standard C++ Library
Group: System Environment/Libraries
License: GPL
Requires: %{name}-%{gnutarget}

%description %{gnutarget}-libstdc++
This subpackage activates the libstdc++ Standard C++ Library installed by the main package.
It only needs to be installed on machines that
will be running programs built by this toolchain, and
only if the system doesn't already have a compatible library.

%pre %{gnutarget}-libstdc++
for topdir in __PREFIX__/__TARGET__/lib __PREFIX__/__TARGET__/lib64; do
  if test -d $topdir; then
     dirs=`find $topdir -name 'libstdc++*.dir' || true`
     for dir in $dirs $dirs64; do
       if test -f $dir/install.sh; then sh $dir/install.sh || true; fi
     done
  fi
done

%preun %{gnutarget}-libstdc++
for topdir in __PREFIX__/__TARGET__/lib __PREFIX__/__TARGET__/lib64; do
  if test -d $topdir; then
     dirs=`find $topdir -name 'libstdc++*.dir' || true`
     for dir in $dirs $dirs64; do
       if test -f $dir/uninstall.sh; then sh $dir/uninstall.sh || true; fi
     done
  fi
done

%files %{gnutarget}-libstdc++
